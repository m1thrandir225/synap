/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardNotesImport } from './routes/dashboard/notes'
import { Route as DashboardLecturesImport } from './routes/dashboard/lectures'
import { Route as DashboardFilesImport } from './routes/dashboard/files'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as DashboardCoursesIndexImport } from './routes/dashboard/courses/index'
import { Route as DashboardCoursesNewImport } from './routes/dashboard/courses/new'
import { Route as DashboardCoursesCourseIdImport } from './routes/dashboard/courses/$courseId'
import { Route as DashboardCoursesCourseIdEditImport } from './routes/dashboard/courses/$courseId_.edit'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardNotesRoute = DashboardNotesImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardLecturesRoute = DashboardLecturesImport.update({
  id: '/lectures',
  path: '/lectures',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardFilesRoute = DashboardFilesImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => DashboardRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardCoursesIndexRoute = DashboardCoursesIndexImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCoursesNewRoute = DashboardCoursesNewImport.update({
  id: '/courses/new',
  path: '/courses/new',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCoursesCourseIdRoute = DashboardCoursesCourseIdImport.update({
  id: '/courses/$courseId',
  path: '/courses/$courseId',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCoursesCourseIdEditRoute =
  DashboardCoursesCourseIdEditImport.update({
    id: '/courses/$courseId_/edit',
    path: '/courses/$courseId/edit',
    getParentRoute: () => DashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/files': {
      id: '/dashboard/files'
      path: '/files'
      fullPath: '/dashboard/files'
      preLoaderRoute: typeof DashboardFilesImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/lectures': {
      id: '/dashboard/lectures'
      path: '/lectures'
      fullPath: '/dashboard/lectures'
      preLoaderRoute: typeof DashboardLecturesImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/notes': {
      id: '/dashboard/notes'
      path: '/notes'
      fullPath: '/dashboard/notes'
      preLoaderRoute: typeof DashboardNotesImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/courses/$courseId': {
      id: '/dashboard/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/dashboard/courses/$courseId'
      preLoaderRoute: typeof DashboardCoursesCourseIdImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/courses/new': {
      id: '/dashboard/courses/new'
      path: '/courses/new'
      fullPath: '/dashboard/courses/new'
      preLoaderRoute: typeof DashboardCoursesNewImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/courses/': {
      id: '/dashboard/courses/'
      path: '/courses'
      fullPath: '/dashboard/courses'
      preLoaderRoute: typeof DashboardCoursesIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/courses/$courseId_/edit': {
      id: '/dashboard/courses/$courseId_/edit'
      path: '/courses/$courseId/edit'
      fullPath: '/dashboard/courses/$courseId/edit'
      preLoaderRoute: typeof DashboardCoursesCourseIdEditImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardFilesRoute: typeof DashboardFilesRoute
  DashboardLecturesRoute: typeof DashboardLecturesRoute
  DashboardNotesRoute: typeof DashboardNotesRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardCoursesCourseIdRoute: typeof DashboardCoursesCourseIdRoute
  DashboardCoursesNewRoute: typeof DashboardCoursesNewRoute
  DashboardCoursesIndexRoute: typeof DashboardCoursesIndexRoute
  DashboardCoursesCourseIdEditRoute: typeof DashboardCoursesCourseIdEditRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardFilesRoute: DashboardFilesRoute,
  DashboardLecturesRoute: DashboardLecturesRoute,
  DashboardNotesRoute: DashboardNotesRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardCoursesCourseIdRoute: DashboardCoursesCourseIdRoute,
  DashboardCoursesNewRoute: DashboardCoursesNewRoute,
  DashboardCoursesIndexRoute: DashboardCoursesIndexRoute,
  DashboardCoursesCourseIdEditRoute: DashboardCoursesCourseIdEditRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard/files': typeof DashboardFilesRoute
  '/dashboard/lectures': typeof DashboardLecturesRoute
  '/dashboard/notes': typeof DashboardNotesRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/courses/$courseId': typeof DashboardCoursesCourseIdRoute
  '/dashboard/courses/new': typeof DashboardCoursesNewRoute
  '/dashboard/courses': typeof DashboardCoursesIndexRoute
  '/dashboard/courses/$courseId/edit': typeof DashboardCoursesCourseIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard/files': typeof DashboardFilesRoute
  '/dashboard/lectures': typeof DashboardLecturesRoute
  '/dashboard/notes': typeof DashboardNotesRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/courses/$courseId': typeof DashboardCoursesCourseIdRoute
  '/dashboard/courses/new': typeof DashboardCoursesNewRoute
  '/dashboard/courses': typeof DashboardCoursesIndexRoute
  '/dashboard/courses/$courseId/edit': typeof DashboardCoursesCourseIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/dashboard/files': typeof DashboardFilesRoute
  '/dashboard/lectures': typeof DashboardLecturesRoute
  '/dashboard/notes': typeof DashboardNotesRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/courses/$courseId': typeof DashboardCoursesCourseIdRoute
  '/dashboard/courses/new': typeof DashboardCoursesNewRoute
  '/dashboard/courses/': typeof DashboardCoursesIndexRoute
  '/dashboard/courses/$courseId_/edit': typeof DashboardCoursesCourseIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/dashboard/files'
    | '/dashboard/lectures'
    | '/dashboard/notes'
    | '/dashboard/'
    | '/dashboard/courses/$courseId'
    | '/dashboard/courses/new'
    | '/dashboard/courses'
    | '/dashboard/courses/$courseId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard/files'
    | '/dashboard/lectures'
    | '/dashboard/notes'
    | '/dashboard'
    | '/dashboard/courses/$courseId'
    | '/dashboard/courses/new'
    | '/dashboard/courses'
    | '/dashboard/courses/$courseId/edit'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/dashboard/files'
    | '/dashboard/lectures'
    | '/dashboard/notes'
    | '/dashboard/'
    | '/dashboard/courses/$courseId'
    | '/dashboard/courses/new'
    | '/dashboard/courses/'
    | '/dashboard/courses/$courseId_/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/files",
        "/dashboard/lectures",
        "/dashboard/notes",
        "/dashboard/",
        "/dashboard/courses/$courseId",
        "/dashboard/courses/new",
        "/dashboard/courses/",
        "/dashboard/courses/$courseId_/edit"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/dashboard/files": {
      "filePath": "dashboard/files.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/lectures": {
      "filePath": "dashboard/lectures.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/notes": {
      "filePath": "dashboard/notes.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/courses/$courseId": {
      "filePath": "dashboard/courses/$courseId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/courses/new": {
      "filePath": "dashboard/courses/new.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/courses/": {
      "filePath": "dashboard/courses/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/courses/$courseId_/edit": {
      "filePath": "dashboard/courses/$courseId_.edit.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
